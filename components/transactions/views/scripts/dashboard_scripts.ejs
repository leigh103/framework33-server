<script>

    extend.transactions = function(){

        scope.view.selected = false
        scope.view.all_action_text = 'Select Bulk Actions'

        scope.setRefund = function(item){
            item.refund = true
            item.refund_qty = item.quantity
            view.update('new.items')
        }

        scope.checkRefund = function(item, type){

            if (item.refund_qty > item.quantity){
                item.refund_qty = item.quantity
                scope.notify('Refund quantity cannot be more than '+item.quantity+' for this item','error')
            }

        }

        scope.createRefund = function(){

            let check = scope.new.items.filter((item)=>{
                return item.refund
            })

            if (check.length > 0){

                let payload = {
                    _key: scope.new._key,
                    items: check
                }
                scope.post('transactions/refund', payload).then((data)=>{

                    scope.new = data
                    scope.view.refund = false
                    view.update('new')
                    view.update('view.refund')
                    scope.notify('Refund Created')

                }).catch((err)=>{
                    console.log(err)
                    scope.notify(err,'error',5,'fa-exclamation-circle')
                })
            } else {
                scope.notify('Please select items to refund','error')
            }

        }

        scope.removeDelOptn = function(index){

            scope.transaction_settings.delivery_options.splice(index, 1)
            view.update('transaction_settings.delivery_options')
        }

        scope.addDelOptn = function(){

            if (!scope.transaction_settings.delivery_options){
                scope.transaction_settings.delivery_options = []
            }
            scope.transaction_settings.delivery_options.push(scope.new)
            console.log(scope.transaction_settings.delivery_options)
            scope.new = {}
            view.update('transaction_settings.delivery_options')
            view.update('new')
            scope.saveItem('transaction_settings', scope.transaction_settings)
        }

        scope.editTransacton = function(idx){

            contextCloseAll()

            if (!idx){
                idx = 0
            }

            if (idx >= 0){
                scope.new = scope.transactions[idx]
            } else {
                scope.new = {}
            }

            scope.openModal('show_transaction')
            view.update('new')
            view.update('new.customer')
            view.update('new.status_logs')
            view.update('new.billing_address')
            view.update('new.shipping_address')

        }

        scope.parseDeliveryOptions = function(){

            scope.transaction_settings.delivery_options = scope.transaction_settings.delivery_options.map((option)=>{
                console.log(option)
                                                            option.price = option.price/100
                                                            option.orders_over = option.orders_over/100
                                                            return option
                                                        })
            view.update('transaction_settings.delivery_options')

        }

        scope.checkTracking = function(idx){

            if (!idx){
                idx = 0
            }
            if (this.target.value.match(/^[A-Za-z]{2}[0-9]+GB$/)){
                scope.transactions[idx].shipping_company = 'royal_mail'
            } else if (this.target.value.match(/^0[0-9]{10,14}[a-zA-Z]?$/)){
                scope.transactions[idx].shipping_company = 'dpd'
            }

            view.update('transactions['+idx+']')

        }

        scope.showActions = function(){

            for (var i in scope.transactions){

                if (scope.transactions[i].selected && scope.transactions[i].selected == true){
                    scope.view.selected = true
                    view.update('view.selected')
                    break
                } else if (i == scope.transactions.length -1){
                    scope.view.selected = false
                    view.update('view.selected')
                }

            }

        }

        scope.selectAllAction = function(action, text){
            scope.view.all_action_text = text
            scope.view.all_action = action
            view.update('view.all_action_text')
            contextCloseAll()
        }

        scope.processAllAction = function(){

            if (scope.view.all_action && scope.view.all_action == 'print'){
                scope.printAll()
            } else if (scope.view.all_action){
                scope.updateAll(scope.view.all_action)
            }

        }

        scope.addTracking = function(transaction){

            let selected = false

            if (!transaction.shipping_method){
                scope.notify('Please specify which courier the shipping is with','error',10,'fas fa-question')
                return false
            }

            if (transaction.selected === true){
                transaction.selected = false
                selected = true
            }

            scope.post('transactions/save', transaction).then((data)=>{
                if (selected === true){
                    transaction.selected = true
                }
                scope.notify('Tracking Added')
            }).catch((err)=>{
                scope.notify(err,'error')
            })

        }

        scope.setStatus = function(key, status){

            let idx = scope.transactions.findIndex((item)=>{
                return item._key == key
            })

            let payload = {
                _key: key,
                status: status
            }

            scope.post('transactions', payload).then(()=>{

                scope.transactions[idx].status = status
                scope.notify('Saved')
                view.update('transactions['+idx+']')

            }).catch((err)=>{
                console.log(err)
                scope.notify('Unable to save status','error')
            })

        }

        scope.selectAll = function(){

            scope.view.all_selected = !scope.view.all_selected

            scope.transactions = scope.transactions.map((transaction) => {
                transaction.selected = scope.view.all_selected
                return transaction
            })

            scope.showActions()
            view.update('view.all_selected')
            view.update('transactions')

        }

        scope.updateSingle = function(status){

            scope.transactions = scope.transactions.map((transaction) => {
                delete transaction.selected
                return transaction
            })

            if (scope.new){
                scope.new.selected = true
            }
            scope.updateAll(status)
            scope.openModal(false)

        }

        scope.updateAll = function(status){

            contextCloseAll()

            let keys = []
            scope.transactions.map((transaction) => {

                if (transaction.selected){
                    transaction.status = status
                    delete transaction.selected
                    keys.push(transaction._key)
                }
                return transaction
            })

            if (keys.length > 0){

                let payload = {
                    ids: keys,
                    status: status
                }

                scope.post('/dashboard/transactions/update', payload).then(()=>{

                    if (status == 'processing'){
                        window.location.href = '/dashboard/transactions/print/'+keys.join(',')
                    } else {
                        view.update('transactions')
                    }

                }).catch((err)=>{
                    console.log(err)
                    scope.notify(err,'error')
                })
            } else {
                scope.notify('Please select at least 1 transaction', 'error')
            }


        }

        scope.printAll = function(){

            let keys = []
            scope.transactions.map((transaction) => {

                if (transaction.selected){
                    keys.push(transaction._key)
                    delete transaction.selected
                }
                return transaction
            })

            if (keys.length > 0){

                let payload = {
                    ids: keys,
                    status: 'processing'
                }

                window.location.href = '/dashboard/transactions/print/'+keys.join(',')

            } else {
                scope.notify('Please select at least 1 transaction to print')
            }


        }
        //
        // scope.shipAll = function(){
        //
        //     let keys = []
        //     scope.transactions.map((transaction) => {
        //
        //         if (transaction.selected){
        //             keys.push(transaction._key)
        //             transaction.status = 'shipped'
        //         }
        //         return transaction
        //     })
        //
        //     if (keys.length > 0){
        //
        //         let payload = {
        //             ids: keys,
        //             status: 'shipped'
        //         }
        //
        //         scope.post('/dashboard/transactions/update', payload).then(()=>{
        //             view.update('transactions')
        //         }).catch((err)=>{
        //             console.log(err)
        //             scope.notify(err,'error')
        //         })
        //     } else {
        //         scope.notify('Please select at least 1 transaction to mark as shipped')
        //     }
        //
        //
        // }

    }

</script>
