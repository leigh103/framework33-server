

    <script>

        extend.content = function(){

            scope.view.content = {
                blocks:[]
            }
            scope.view.add = true
            scope.view.saved = true

// content_type functions


            scope.getTypes = function(){

                scope.get('content_types').then((data)=>{
                    console.log(data)
                })

            }

            scope.addType = function(){

                scope.new._user_id = '<%- user._id %>'
                scope.post('content_types',scope.new).then((data)=>{
                    scope.notify('Added content type')
                }).catch((err)=>{
                    scope.notify(err,'error')
                })

            }


// content functions


            scope.gotoEditor = function(content_type, id){
                window.location.href = '/dashboard/content/'+content_type+'/edit/'+id.replace('content/','')
            }

            watch['view.editor'] = function(data){
            //    console.log(data)
            }

            scope.setContent = function(type){
                scope.view.content.type = type
            }

            scope.getContent = function(key){

                if (localStorage.getItem('content')){

                    let content = JSON.parse(localStorage.getItem('content'))
                    console.log(content)
                    scope.view.content.blocks = content.blocks
                    scope.view.content = content

                } else {

                    scope.get('content',key).then((content)=>{
console.log(content)
                        scope.view.content.blocks = content.blocks
                        scope.view.content = content

                    }).catch((err)=>{
                        scope.notify(err,5,'error')
                    })

                }

            }

            scope.addNewSection = function(){
                scope.checkSaved().then(()=>{
                    scope.view.modal = 'show_sections'
                }).catch((err)=>{
                    scope.notify(err,'error')
                })
            }

            scope.selectBlock = function(block_name){

                scope.get('/dashboard/content/get-blocks/'+block_name).then((block)=>{
                    scope.view.modal = false
                    scope.view.selected_block = block
                    scope.view.editor = block.editor
                    scope.addBlock()
                })

            }

            scope.loadBlock = function(content, index){

                scope.checkSaved().then(()=>{

                    scope.get('/dashboard/content/get-blocks/'+content.block).then((block)=>{

                        scope.view.selected_block = block
                        scope.view.selected_block.index = index

                        if (content.styling){
                            scope.view.selected_block.styling = content.styling
                        }

                        let new_fields = [], content_field

                        block.editor.map((field)=>{

                            content_field = content.fields.find((item)=>{
                                return item.field == field.field
                            })
                            if (content_field){
                                field.value = content_field.value
                                field.classes = content_field.classes
                            }
                        })

                        content.fields = block.editor
                        scope.view.editor = block.editor
                        scope.view.blocks = true
                        scope.view.add = false

                        setTimeout(function(){

                            let code = document.querySelectorAll('code.contenteditable')
                            if (code){

                                for (var i in code){
                                    if (code[i] && typeof code[i].addEventListener == 'function'){
                                        //when the contenteditable gets focused, start listening to key presses
                                        code[i].removeEventListener('keydown', scope.insertTab)
                                        code[i].addEventListener('keydown', scope.insertTab)
                                    }
                                }
                            }

                            let imgs = document.querySelectorAll('.contenteditable img')
                            if (imgs){
                                for (var i in imgs){
                                    if (imgs[i] && typeof imgs[i].addEventListener == 'function'){
                                        imgs[i].removeEventListener('click', scope.showImageEdit)
                                        imgs[i].addEventListener('click', scope.showImageEdit)
                                    }
                                }
                            }

                        },500)

                    })

                }).catch((err)=>{
                    scope.notify(err,'error')
                })

            }

            scope.addBlock = function(){

                if (scope.view.selected_block){

                    let content = {
                        name: scope.view.selected_block.name,
                        styling: scope.view.selected_block.styling,
                        block: scope.view.selected_block.block,
                        fields: scope.view.editor
                    }

                    if (scope.view.selected_block.index){

                        scope.view.content.blocks[scope.view.selected_block.index] = content

                        scope.view.selected_block = {}
                        scope.view.blocks = true
                        scope.view.add = true

                    } else {
                        scope.view.content.blocks.push(content)
                    }

                    localStorage.setItem('content',JSON.stringify(scope.view.content.blocks))

                }

            }

            scope.deleteBlock = function(index){

                scope.view.content.blocks.splice(index, 1)

            }

            scope.removeBlock = function(conf){

                if (conf){
                    scope.view.modal = 'show_del_block_confirm'
                } else {
                    if (scope.view.selected_block.index){
                        scope.view.content.blocks.splice(scope.view.selected_block.index,1)
                        scope.showSettings()
                    }
                    scope.view.modal = false
                }

            }

            scope.closeBlocks = function(){

                scope.view.selected_block = false
                scope.view.editor = {}

            }

            scope.showSettings = function(){

                scope.view.blocks = false
                scope.view.selected_block = false
                scope.view.editor = {}

            }

            scope.checkSaved = function(){
                return new Promise(function(resolve, reject) {
                    if (scope.view.saved === true){
                        scope.notify('cancel')
                        resolve()
                    } else {
                        scope.view.saved = true
                        reject('This section has not been saved')
                    }
                })
            }

            scope.updateCE = function(){

                return new Promise(function(resolve, reject) {

                    let ce_divs = document.getElementsByClassName('contenteditable')

                    if (ce_divs.length > 0){

                        for (var i in ce_divs){

                            let ce_style = window.getComputedStyle(ce_divs[i])
                            if (ce_divs[i] && ce_style.display == 'block' && ce_divs[i].innerHTML && typeof ce_divs[i].innerHTML == 'string'){
                                let el_prop = ce_divs[i].getAttribute('app-index').replace(/__([0-9]+)__/g,'[$1].').replace(/__/g,'.')
                                _.set(scope,el_prop,scope.convertEntities(ce_divs[i].innerHTML))
                            }

                            if (i == ce_divs.length-1){
                                resolve()
                            }
                        }

                    } else {
                        resolve()
                    }

                })
            }

            scope.convertEntities = function(str){
                return String(str).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
            }

            scope.saveLocal = function(){

                return new Promise(function(resolve, reject) {

                    scope.updateCE().then(()=>{

                        localStorage.setItem('content',JSON.stringify(scope.view.content))
                        scope.view.saved = true
                        scope.notify("Saved as a local draft. The live page hasn't been altered. Click 'Save' once done editing.")
                        resolve()

                    })

                })

            }

            scope.clearLocal = function(save){

                localStorage.removeItem('content')

                if (save){
                    return new Promise(function(resolve, reject) {
                        scope.updateCE().then(()=>{

                            resolve()

                        })
                    })
                } else {
                    location.reload()
                }

            }

            <% if (typeof content_type != 'undefined'){ %>

                scope.saveContent = function(){

                    scope.clearLocal(true).then(()=>{

                        let payload = scope.view.content

                        payload.type = '<%- content_type %>'
                        payload._user_id = '<%- user._id %>'

                        if (scope.view.content.slug){
                            payload.slug = scope.view.content.slug
                        } else {
                            payload.slug = scope.view.content.title
                        }

                        scope.post('content', payload).then((content)=>{
                            scope.notify('Saved!')
                        }).catch((err)=>{
                            scope.notify(err,5,'error')
                        })

                    }).catch((err)=>{
                        scope.notify('Not saved: '+err,'error')
                    })

                }

            <% } %>

            scope.toggleContext = function(type, data){

                let el = document.getElementById(type)

                if (el && el.style && el.style.display != 'none'){
                    el.style.display = 'none'
                    scope.context = {}
                } else {
                    contextCloseAll()
                }

                el.style.display = 'block'
                let top = scope._clicked_element.y,
                    left = scope._clicked_element.x

                if (left+el.offsetWidth > window.innerWidth){
                    left = scope._clicked_element.x - el.offsetWidth + scope._clicked_element.width
                }

                top = top+scope._clicked_element.height

                el.style.top = top+'px'
                el.style.left = left+'px'
                scope.context = data

            }

            scope.editItem = function(collection, obj){

                contextCloseAll()

                scope.resetNew().then(()=>{
                //    console.log(collection, obj)

                    if (typeof obj == 'string'){
                        scope.new._key = obj
                    } else {
                        scope.new = JSON.parse(JSON.stringify(obj))
                    }

                    scope.view.modal = 'show_edit'

                })

            }

            scope.newObj = function(type){
                scope.new = {}
                scope.view.modal = 'show_edit'
            }

            scope.resetNew = function(){

                return new Promise(function(resolve, reject) {
                    for (var i in scope.new){
                        scope.new[i] = ''
                    }
                    resolve()
                });

            }

            scope.addItem = function(collection, obj){

                scope.post(collection, obj).then((data)=>{
                    scope.notify('Added')
                }).catch((err)=>{
                    scope.notify(err,'error',5,'fa-exclamation-circle')
                })

            }

            scope.saveItem = function(collection, obj){

                scope.post(collection, obj).then((data)=>{
                    scope.notify('Updated')
                }).catch((err)=>{
                    scope.notify(err,'error',5,'fa-exclamation-circle')
                })

            }

            scope.deleteItem = function(collection, obj){

                if (scope.view.modal && scope.view.modal == 'delete_confirm'){

                    contextCloseAll()

                    scope.delete(collection,obj._key).then(()=>{
                        scope.notify('Deleted')
                    }).catch((err)=>{
                        scope.notify(err,'error',5,'fa-exclamation-circle')
                    })

                } else {
                    scope.view.modal = 'delete_confirm'
                }

            }

            scope.uploadImg = function(base64, obj, path, name){

                scope.uploadImage(base64, obj, path, name).then(()=>{
                    scope.saveContent()
                })

            }

            scope.delImg = function(base64, obj, path, name){

                scope.deleteImage(base64, obj, path, name).then(()=>{
                    scope.saveContent()
                })

            }

            scope.showImageEdit = function(img){

                scope.view.exec = {}
                scope.view.exec.title = 'Edit URL or Upload New Image'
                scope.view.exec.input = 'Add image URL'
                scope.view.exec.input_2 = 'Image name / ALT tag (required)'
                scope.view.exec.image = img
                scope.view.exec.replace = true
                scope.view.exec.type = 'insertImage'
                scope.view.exec.data = img.target.getAttribute('src')
                scope.view.text_input_2 = img.target.getAttribute('alt')
                scope.view.image_url = img.target.getAttribute('src')

                scope.view.modal = 'show_input'

            }


        }

    </script>
