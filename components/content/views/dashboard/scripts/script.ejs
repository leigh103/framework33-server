

    <script>

        extend.content = function(){

            scope.view.content = {
                blocks:[]
            }
            scope.view.add = true
            scope.view.saved = true

            document.onkeyup = function (e) {

                scope.view.saved = false
                clearTimeout(scope.view.auto_update)

                scope.view.auto_update = setTimeout(function(){
                    scope.renderContent()
                },500)

            }

            window.onbeforeunload = function(event) {
                if (!scope.view.saved){
                    return 'You have unsaved changes'
                }
            }

            scope.editContent = function(table){

                if (scope[table] && scope[table][scope.view.key] && scope[table][scope.view.key]._key){
                    window.location.href = '/dashboard/content/edit/'+scope[table][scope.view.key]._key
                }

            }

// content_type functions


            scope.getTypes = function(){

                scope.get('content_types').then((data)=>{
                    console.log(data)
                })

            }

            scope.addType = function(){

                scope.new._user_id = '<%- user._id %>'
                scope.post('content_types',scope.new).then((data)=>{
                    scope.notify('Added content type')
                }).catch((err)=>{
                    scope.notify(err,'error')
                })

            }


// content functions


            scope.setContent = function(type){
                scope.view.content.type = type
            }

            scope.getContent = function(key){

                // if (localStorage.getItem('content')){
                //
                //     let content = JSON.parse(localStorage.getItem('content'))
                //     console.log(content)
                //     scope.view.content.blocks = content.blocks
                //     scope.view.content = content
                //
                // } else {

                    scope.get('content',key).then((content)=>{

                        scope.view.content = content
                        view.update('view.content')

                    }).catch((err)=>{
                        scope.notify(err,5,'error')
                    })
                //
                // }

            }

            scope.addNewSection = function(){
                console.log('here')
            //    scope.checkSaved().then(()=>{
                    scope.view.modal = 'show_sections'
                    view.update('view.modal')

            }

            scope.selectBlock = function(block_name){

                scope.get('/dashboard/content/get-blocks/'+block_name).then((block)=>{
                    scope.view.modal = false
                    scope.view.selected_block = block
                    scope.view.editor = block.editor
                    view.update('view.modal')
                    view.update('view.selected_block')
                    view.update('view.editor')
                    scope.addBlock()
                })

            }

            scope.loadBlock = function(content, index){

                if (!index){
                    index = 0
                }

                if (typeof content == 'string' && content.match(/preview_content_block_/)){
                    content = scope.view.content.blocks[content.replace(/preview_content_block_/,'')]
                } else if (typeof content != 'object'){
                    return false
                }

                // let selected_preview_block = document.querySelector('#preview_content_block_'+index)
                //
                // if (typeof content == 'object' && selected_preview_block){
                //     const preview = document.querySelector('#preview'),
                //           rectpreview = preview.getBoundingClientRect(),
                //           rectspb = selected_preview_block.getBoundingClientRect()
                //
                //     preview.scrollTop = rectspb.top - rectpreview.top;
                // }

            //    scope.checkSaved().then(()=>{

                    scope.get('/dashboard/content/get-blocks/'+content.block).then((block)=>{

                        scope.view.selected_block = block
                        scope.view.selected_block.index = index
                        scope.view.selected_block.name = content.name
                        scope.view.selected_block.styling = content.styling

                        if (content.styling){
                            scope.view.selected_block.styling = content.styling
                        }

                        let new_fields = [], content_field

                        block.editor.map((field)=>{

                            content_field = content.fields.find((item)=>{
                                return item.field == field.field
                            })
                            if (content_field){
                                field.value = content_field.value
                                field.classes = content_field.classes
                            }
                        })

                        content.fields = block.editor
                        scope.view.editor = block.editor
                        scope.view.blocks = true
                        scope.view.add = false

                        view.update('view.editor')
                        view.update('view.blocks')
                        view.update('view.selected_block')
                        view.update('view.selected_block.styling.background')
                        view.update('view.selected_block.styling.text')

                        setTimeout(function(){

                            let code = document.querySelectorAll('code.contenteditable')
                            if (code){

                                for (var i in code){
                                    if (code[i] && typeof code[i].addEventListener == 'function'){
                                        //when the contenteditable gets focused, start listening to key presses
                                        code[i].removeEventListener('keydown', scope.insertTab)
                                        code[i].addEventListener('keydown', scope.insertTab)
                                    }
                                }
                            }

                            let imgs = document.querySelectorAll('.contenteditable img')
                            if (imgs){
                                for (var i in imgs){
                                    if (imgs[i] && typeof imgs[i].addEventListener == 'function'){
                                        imgs[i].removeEventListener('click', scope.showImageEdit)
                                        imgs[i].addEventListener('click', scope.showImageEdit)
                                    }
                                }
                            }

                        },500)

                    })

                // }).catch((err)=>{
                //     scope.notify(err,'error')
                // })

            }

            scope.addBlock = function(){

                if (scope.view.selected_block){

                    let content = {
                        name: scope.view.selected_block.name,
                        styling: scope.view.selected_block.styling,
                        block: scope.view.selected_block.block,
                        fields: scope.view.editor
                    }

                    if (scope.view.selected_block.index){

                        scope.view.content.blocks[scope.view.selected_block.index] = content

                        scope.view.selected_block = {}
                        scope.view.blocks = true
                        scope.view.add = true

                    } else {
                        scope.view.content.blocks.push(content)
                    }
                    view.update('view.content.blocks')
                    localStorage.setItem('content',JSON.stringify(scope.view.content.blocks))

                }

            }

            scope.deleteBlock = function(index){

                scope.view.content.blocks.splice(index, 1)
                view.update('view.content.blocks')

            }

            scope.removeBlock = function(conf){

                if (conf){
                    scope.view.modal = 'show_del_block_confirm'
                } else {
                    if (scope.view.selected_block.index){
                        scope.view.content.blocks.splice(scope.view.selected_block.index,1)
                        scope.showSettings()
                    }
                    scope.view.modal = false
                }

                view.update('view')

            }

            scope.closeBlocks = function(){

                scope.view.selected_block = false
                scope.view.editor = {}
                view.update('view')

            }

            scope.showSettings = function(){

                scope.view.blocks = false
                scope.view.selected_block = false
                scope.view.editor = {}
                view.update('view')

            }

            scope.checkSaved = function(){
                // return new Promise(function(resolve, reject) {
                //     if (scope.view.saved === true){
                //         scope.notify('cancel')
                //         resolve()
                //     } else {
                //         scope.view.saved = true
                //         reject('This section has not been saved')
                //     }
                // })
            }

            scope.updateCE = function(){

                return new Promise(function(resolve, reject) {

                    let ce_divs = document.getElementsByClassName('contenteditable')

                    if (ce_divs.length > 0){

                        for (var i in ce_divs){

                            let ce_style = window.getComputedStyle(ce_divs[i])
                            if (ce_divs[i] && ce_style.display == 'block'){
                                if (typeof ce_divs[i]._app == 'object'){
                                    evaluate.setValue(ce_divs[i]._app.keys[0], scope.convertEntities(ce_divs[i].innerHTML))
                                }
                            }

                            if (i == ce_divs.length-1){
                                resolve()
                            }
                        }

                    } else {
                        resolve()
                    }

                })
            }

            scope.convertEntities = function(str){
                return String(str).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
            }

            scope.saveLocal = function(){

                return new Promise(function(resolve, reject) {

                    scope.updateCE().then(()=>{

                        localStorage.setItem('content',JSON.stringify(scope.view.content))
                        scope.view.saved = true
                        scope.notify("Saved as a local draft. The live page hasn't been altered. Click 'Save' once done editing.")
                        resolve()

                    })

                })

            }

            scope.clearLocal = function(save){

                localStorage.removeItem('content')

                if (save){
                    return new Promise(function(resolve, reject) {
                        scope.updateCE().then(()=>{

                            resolve()

                        })
                    })
                } else {
                    location.reload()
                }

            }

            scope.renderContent = function(external){

                http.post('/dashboard/content/render',scope.view.content).then((html)=>{

                    document.querySelector('#preview').innerHTML = html

                    let preview_blocks = document.querySelectorAll('#preview *[app-block]')

                    for (var i in preview_blocks){
                        if (preview_blocks[i] && typeof preview_blocks[i].addEventListener == 'function'){
                            let id = "preview_content_block_"+i
                            preview_blocks[i].setAttribute('id',id)
                            preview_blocks[i].addEventListener('click',function(){
                                scope.loadBlock(id)
                            })
                        }
                    }

                    if (external){
                        document.getElementById("preview-link").click();
                    }

                }).catch((err)=>{
                    scope.notify(err, 'error')
                })

            }

                scope.saveContent = function(){

                    if (scope.view.selected_block && scope.view.content.blocks[scope.view.selected_block.index]){
                        scope.view.content.blocks[scope.view.selected_block.index].name = scope.view.selected_block.name
                        view.update('view.content.blocks['+scope.view.selected_block.index+']')
                    }

                    if (scope.view.content.notification && scope.view.content.notification.length < 5){
                        scope.view.content.notification = ''
                        view.update('view.content.notification')
                    }

                    scope.updateCE().then(()=>{

                        let payload = scope.view.content

                        payload._user_id = '<%- user._id %>'

                        if (scope.view.content.slug){
                            payload.slug = scope.view.content.slug
                        } else {
                            payload.slug = scope.view.content.title
                        }

                        scope.post('content', payload).then((content)=>{

                            if (scope.window.path_obj.pop() == 'new'){
                                window.location.href = 'edit/'+content._key
                            } else {
                                scope.notify('Saved!')
                            }

                            scope.view.saved = true

                        }).catch((err)=>{
                            scope.notify(err,5,'error')
                        })

                    }).catch((err)=>{
                       scope.notify('Not saved: '+err,'error')
                    })

                }

                scope.uploadImg = function(image, obj){

                    let name = 'content-image'

                    if (scope.view.content.slug){
                        name = scope.view.content.slug
                    }

                    if (scope.view.selected_block && scope.view.selected_block.name){
                        name += scope.view.selected_block.name.replace(/\s/g,'-').toLowerCase()
                    }

                    let payload = {
                        base64: image,
                        file_name: name,
                        file_path: "content"
                    }

                    scope.view.upload_text = 'Uploading...'
                    view.update('view.upload_text')

                    http.post('/api/image',payload).then((data) => {
                        data = data.replace(/\"/g,'')
                        evaluate.setValue(obj, data)
                        view.update(obj)
                        scope.renderContent()
                    }).catch((err)=>{
                        scope.notify(err,'error')
                    })

                }


            // scope.uploadImg = function(base64, obj, path, name){
            //
            //     scope.uploadImage(base64, obj, path, name).then(()=>{
            //         scope.saveContent()
            //     })
            //
            // }

            scope.delImg = function(base64, obj, path, name){

                scope.deleteImage(base64, obj, path, name).then(()=>{
                    scope.saveContent()
                })

            }

            scope.showImageEdit = function(img){

                scope.view.exec = {}
                scope.view.exec.title = 'Edit URL or Upload New Image'
                scope.view.exec.input = 'Add image URL'
                scope.view.exec.input_2 = 'Image name / ALT tag (required)'
                scope.view.exec.image = img
                scope.view.exec.replace = true
                scope.view.exec.type = 'insertImage'
                scope.view.exec.data = img.target.getAttribute('src')
                scope.view.text_input_2 = img.target.getAttribute('alt')
                scope.view.image_url = img.target.getAttribute('src')

                scope.view.modal = 'show_input'

            }

            scope.removeNotification = function(){
                scope.view.content.notification = ''
                document.getElementById('content_notification').innerHTML = ''
            }

            setTimeout(function(){
                scope.renderContent()
            },1000)


        }

    </script>
