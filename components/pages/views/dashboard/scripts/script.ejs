

    <script>

        extend.pages = function(){

            scope.view.pages = {
                blocks:[],
                title:'',
                slug:''
            }
            scope.view.add = true
            scope.view.saved = true
            scope.view.show_details = true
            scope.view.modal_tab = 'basics'

            scope.view.colors = ['bg-primary', 'bg-secondary', 'bg-palette-1', 'bg-palette-2', 'bg-palette-3', 'bg-palette-4', 'bg-palette-5', 'bg-palette-6', 'bg-palette-7', 'bg-palette-8', 'bg-white','bg-grey']

            document.onkeyup = function (e) {

                scope.view.saved = false
                clearTimeout(scope.view.auto_update)

                scope.view.auto_update = setTimeout(function(){
                    scope.renderPage()
                },500)

            }

            window.onbeforeunload = function(event) {
                if (!scope.view.saved){
                    return 'You have unsaved changes'
                }
            }


// pages_type functions


            scope.setUpNew = function(){
                scope.openModal('set_up')
            }


            scope.getTypes = function(){

                scope.get('page_types').then((data)=>{
                    console.log(data)
                })

            }

            scope.selectColor = function(){

                let style = getComputedStyle(this.target),
                    data = this.target.parentNode._app
                    // scope_obj = this.target.parentNode._app.scope_obj

                let obj = evaluate.getValue(data.color.exp)

                if (typeof obj == 'object'){
                    obj.value = style.backgroundColor
                    evaluate.setValue(data.color.exp, obj)
                } else {
                    evaluate.setValue(data.color.exp, style.backgroundColor)
                }

                scope.renderPage()

            }

            scope.addClass = function(field, cls){

                if (!field || !field.class){
                    return
                }

                let re = RegExp(cls,'i')
                if (field.class.match(re)){
                    field.class = field.class.replace(re,'')
                } else {
                    field.class = field.class+" "+cls
                }
                scope.renderPage()
            }

            scope.chkClass = function(field, cls){

                let re = RegExp(cls,'i')
                if (field && field.class && field.class.match(re)){
                    console.log('here')
                    return true
                }
            }


            scope.addType = function(){

                scope.new._user_id = '<%- user._id %>'
                scope.post('page_types',scope.new).then((data)=>{
                    scope.notify('Added page type')
                }).catch((err)=>{
                    scope.notify(err,'error')
                })

            }


// pages functions

            scope.showMenu = function(section){

                scope.view.menu = section

                if (section == 'main'){
                    scope.view.tab = 'blocks'
                } else if (section == 'init'){
                    scope.view.menu = 'main'
                    scope.view.tab = 'blocks'
                } else if (section == 'edit'){
                    scope.view.tab = 'content'
                }
                view.update('view.menu')
                view.update('view.tab')
                view.update('view.colours')
            }

            scope.showMenu('init')


            scope.setPage = function(type){
                scope.view.pages.type = type
            }

            scope.getPage = function(key){

                // if (localStorage.getItem('pages')){
                //
                //     let pages = JSON.parse(localStorage.getItem('pages'))
                //     console.log(pages)
                //     scope.view.pages.blocks = pages.blocks
                //     scope.view.pages = pages
                //
                // } else {

                    scope.get('pages',key).then((pages)=>{

                        scope.view.pages = pages
                        scope.view.tab = 'blocks'

                        view.update('view.pages')

                    }).catch((err)=>{
                        scope.notify(err,5,'error')
                    })
                //
                // }

            }

            scope.addNewSection = function(append){

                if (append){
                    scope.view.hovered_section = false
                }

            //    scope.checkSaved().then(()=>{
                    scope.openModal('show_sections')

            }

            scope.selectBlock = function(block_name){

                scope.get('/dashboard/pages/get-blocks/'+block_name).then((block)=>{
                    scope.view.modal = false
                    scope.view.selected_block = block
                    scope.view.editor = block.editor
                    view.update('view.modal')
                    view.update('view.selected_block')
                    view.update('view.editor')
                    scope.addBlock()
                })

            }

            scope.loadBlock = function(pages, index){

                if (!index){
                    index = 0
                }

                if (typeof pages == 'string' && pages.match(/preview_pages_block_/)){
                    index = parseInt(pages.replace(/preview_pages_block_/,''))
                    pages = scope.view.pages.blocks[index]

                } else if (typeof pages != 'object'){
                    return false
                }

                // let selected_preview_block = document.querySelector('#preview_pages_block_'+index)
                //
                // if (typeof pages == 'object' && selected_preview_block){
                //     const preview = document.querySelector('#preview'),
                //           rectpreview = preview.getBoundingClientRect(),
                //           rectspb = selected_preview_block.getBoundingClientRect()
                //
                //     preview.scrollTop = rectspb.top - rectpreview.top;
                // }

            //    scope.checkSaved().then(()=>{

                    scope.get('/dashboard/pages/get-blocks/'+pages.block).then((block)=>{

                        scope.view.selected_block = block
                        scope.view.selected_block.index = index
                        scope.view.selected_block.name = pages.name
                        scope.view.selected_block.styling = pages.styling

                        if (pages.styling){
                            scope.view.selected_block.styling = pages.styling
                        }

                        let new_fields = [], pages_field

                        block.editor.map((field)=>{

                            pages_field = pages.fields.find((item)=>{
                                return item.field == field.field
                            })

                            if (pages_field){
                                field.value = pages_field.value
                                field.classes = pages_field.classes
                            }
                        })

                        pages.fields = block.editor
                        scope.view.editor = block.editor
                        scope.view.blocks = true
                        scope.view.add = false
                        scope.showMenu('edit')

                        if (scope.view.editor.length == 0){
                            scope.view.editor = false
                        }

                        view.update('view.editor')
                        view.update('view.blocks')
                        view.update('view.colors')
                        view.update('view.selected_block')
                        view.update('view.selected_block.styling.carousel')
                        view.update('view.selected_block.styling.container')
                        view.update('view.selected_block.styling.background')
                        view.update('view.selected_block.styling.text')

                    //    setTimeout(function(){

                        let code = document.querySelectorAll('code.contenteditable')
                        if (code){

                            for (var i in code){
                                if (code[i] && typeof code[i].addEventListener == 'function'){
                                    //when the contenteditable gets focused, start listening to key presses
                                    code[i].removeEventListener('keydown', scope.insertTab)
                                    code[i].addEventListener('keydown', scope.insertTab)
                                }
                            }
                        }

                        let imgs = document.querySelectorAll('.contenteditable img')
                        if (imgs){
                            for (var i in imgs){
                                if (imgs[i] && typeof imgs[i].addEventListener == 'function'){
                                    imgs[i].removeEventListener('click', scope.showImageEdit)
                                    imgs[i].addEventListener('click', scope.showImageEdit)
                                }
                            }
                        }

                    //    },500)

                    })

                // }).catch((err)=>{
                //     scope.notify(err,'error')
                // })

            }

            scope.addBlock = function(){

                if (scope.view.selected_block){

                    scope.view.editor.map((field)=>{
                        if (!field.value){
                            field.value = capitalise(field.field.replace(/_/g,' '))+" goes here"
                        }
                    })

                    let pages = {
                        name: scope.view.selected_block.name,
                        styling: scope.view.selected_block.styling,
                        folder: scope.view.selected_block.folder,
                        block: scope.view.selected_block.block,
                        fields: scope.view.editor
                    }

                    if (scope.view.selected_block.index){

                        scope.view.pages.blocks[scope.view.selected_block.index] = pages

                        scope.view.selected_block = {}
                        scope.view.blocks = true
                        scope.view.add = true

                    } else {

                        if (!scope.view.pages.blocks){
                            scope.view.pages.blocks = []
                        }
                        if (scope.view.hovered_section !== false && scope.view.hovered_section >= 0){
                            console.log('hs',scope.view.hovered_section)
                            scope.view.pages.blocks.splice(scope.view.hovered_section+1, 0, pages)
                        } else {
                            scope.view.pages.blocks.push(pages)
                        }

                    }
                    view.update('view.pages.blocks')
                    localStorage.setItem('pages',JSON.stringify(scope.view.pages.blocks))

                    scope.renderPage()
                    scope.loadBlock('preview_pages_block_'+scope.view.pages.blocks.length-1)

                }

            }

            scope.deleteBlock = function(index){
                console.log(index)
                scope.view.pages.blocks.splice(index, 1)
                view.update('view.pages.blocks')
                scope.renderPage()

            }

            scope.removeBlock = function(conf){

                if (conf){
                    scope.openModal('show_del_block_confirm')
                } else {

                    if (scope.view.selected_block.index >= 0){
                        scope.view.pages.blocks.splice(scope.view.selected_block.index,1)
                        view.update('view.pages.blocks')
                        scope.renderPage()
                        scope.showMenu('init')
                    }
                    scope.closeModal()
                }

            }

            scope.closeBlocks = function(){

                scope.view.selected_block = false
                scope.view.editor = {}
                view.update('view')

            }

            scope.showSettings = function(){

                scope.view.blocks = false
                scope.view.selected_block = false
                scope.view.editor = {}
                view.update('view')

            }

            scope.checkSaved = function(){
                // return new Promise(function(resolve, reject) {
                //     if (scope.view.saved === true){
                //         scope.notify('cancel')
                //         resolve()
                //     } else {
                //         scope.view.saved = true
                //         reject('This section has not been saved')
                //     }
                // })
            }

            scope.updateCE = function(){

                return new Promise(function(resolve, reject) {

                    let ce_divs = document.getElementsByClassName('contenteditable')

                    if (ce_divs.length > 0){

                        for (var i in ce_divs){

                            let ce_style = window.getComputedStyle(ce_divs[i])
                            if (ce_divs[i] && ce_style.display == 'block'){
                                if (typeof ce_divs[i]._app == 'object'){
                                    evaluate.setValue(ce_divs[i]._app.keys[0], scope.convertEntities(ce_divs[i].innerHTML))
                                }
                            }

                            if (i == ce_divs.length-1){
                                resolve()
                            }
                        }

                    } else {
                        resolve()
                    }

                })
            }

            scope.convertEntities = function(str){
                return String(str).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
            }

            scope.saveLocal = function(){

                return new Promise(function(resolve, reject) {

                    scope.updateCE().then(()=>{

                        localStorage.setItem('pages',JSON.stringify(scope.view.pages))
                        scope.view.saved = true
                        scope.notify("Saved as a local draft. The live page hasn't been altered. Click 'Save' once done editing.")
                        resolve()

                    })

                })

            }

            scope.clearLocal = function(save){

                localStorage.removeItem('pages')

                if (save){
                    return new Promise(function(resolve, reject) {
                        scope.updateCE().then(()=>{

                            resolve()

                        })
                    })
                } else {
                    location.reload()
                }

            }

            scope.showInsertSecton = function(id){

                scope.view.hovered_section = parseInt(id.replace(/preview_pages_block_/,''))

                let section = document.getElementById(id),
                    section_insert = document.getElementById('insert-new-section')
//                 let section_box = section.getBoundingClientRect(),
//                     pos = (section_box.y+section_box.height)-33
// console.log(section_box)
//                 section_insert.style.top = pos+'px'
//                 section_insert.style.display = 'flex'

                    if (section_insert && section_insert.style){
                        section_insert.style.display = 'flex'
                    }

                    if (section instanceof Element && section.parentNode instanceof Element && section.nextSibling instanceof Element){
                        section.parentNode.insertBefore(section_insert, section.nextSibling)
                    }

            }

            scope.renderPage = function(external){

                var section_insert = document.getElementById('insert-new-section'),
                    preview = document.getElementById('preview')

                if (preview && preview.parentNode){
                    preview.parentNode.insertBefore(section_insert, preview.nextSibling)
                }

                http.post('/dashboard/pages/render',scope.view.pages).then((html)=>{

                    if (html.length < 36){
                        preview.innerHTML = '<div class="p-3 text-italic text-black transparent-3"><span class="icon arrowleft left black"></span>To get started, add a block using the menu on the left</div>'
                    } else {
                        preview.innerHTML = html
                    }


                    let preview_blocks = document.querySelectorAll('#preview *[app-block]')

                    for (var i in preview_blocks){
                        if (preview_blocks[i] && typeof preview_blocks[i].addEventListener == 'function'){
                            let id = "preview_pages_block_"+i
                            preview_blocks[i].setAttribute('id',id)
                            preview_blocks[i].addEventListener('click',function(){
                                scope.loadBlock(id)
                            })
                            preview_blocks[i].addEventListener('mouseover',function(){
                                scope.showInsertSecton(id)
                            })
                            preview_blocks[i].addEventListener('mouseout',function(){
                            //    document.getElementById('insert-new-section').style.display = 'none'
                            })
                        }
                    }

                    if (external){
                        document.getElementById("preview-link").click();
                    }

                }).catch((err)=>{
                    console.log(err)
                    scope.notify(err, 'error')
                })

            }

                scope.savePage = function(){

                    if (scope.view.selected_block && scope.view.pages.blocks[scope.view.selected_block.index]){
                        scope.view.pages.blocks[scope.view.selected_block.index].name = scope.view.selected_block.name
                        view.update('view.pages.blocks['+scope.view.selected_block.index+']')
                    }

                    if (scope.view.pages.notification && scope.view.pages.notification.length < 5){
                        scope.view.pages.notification = ''
                        view.update('view.pages.notification')
                    }

                    scope.updateCE().then(()=>{

                        let payload = scope.view.pages

                        payload._user_id = '<%- user._id %>'

                        if (scope.view.pages.slug){
                            payload.slug = scope.view.pages.slug
                        } else {
                            payload.slug = scope.view.pages.title
                        }
console.log(payload)
                        scope.post('pages', payload).then((pages)=>{

                            if (scope.window.path_obj.pop() == 'new'){
                                window.location.href = pages._key
                            } else {
                                scope.notify('Saved!')
                            }

                            scope.view.saved = true

                        }).catch((err)=>{
                            scope.notify(err,5,'error')
                        })

                    }).catch((err)=>{
                       scope.notify('Not saved: '+err,'error')
                    })

                }

                scope.saveNewPage = function(){
                    console.log(scope.view.pages)
                }

                scope.uploadImg = function(image, obj){

                    let name = 'pages-image'

                    if (scope.view.pages.slug){
                        name = scope.view.pages.slug
                    }

                    if (scope.view.selected_block && scope.view.selected_block.name){
                        name += scope.view.selected_block.name.replace(/\s/g,'-').toLowerCase()
                    }

                    let payload = {
                        base64: image,
                        file_name: name,
                        file_path: "pages"
                    }

                    scope.view.upload_text = 'Uploading...'
                    view.update('view.upload_text')

                    http.post('/api/image',payload).then((data) => {
                        data = data.replace(/\"/g,'')
                        evaluate.setValue(obj, data)
                        view.update(obj)
                        scope.renderPage()
                    }).catch((err)=>{
                        scope.notify(err,'error')
                    })

                }


            // scope.uploadImg = function(base64, obj, path, name){
            //
            //     scope.uploadImage(base64, obj, path, name).then(()=>{
            //         scope.savepages()
            //     })
            //
            // }

            scope.removeImage = function(field){

                field.image = false
                scope.renderPage()

            }

            scope.showImageEdit = function(img){

                scope.view.exec = {}
                scope.view.exec.title = 'Edit URL or Upload New Image'
                scope.view.exec.input = 'Add image URL'
                scope.view.exec.input_2 = 'Image name / ALT tag (required)'
                scope.view.exec.image = img
                scope.view.exec.replace = true
                scope.view.exec.type = 'insertImage'
                scope.view.exec.data = img.target.getAttribute('src')
                scope.view.text_input_2 = img.target.getAttribute('alt')
                scope.view.image_url = img.target.getAttribute('src')

                scope.view.modal = 'show_input'

            }

            scope.removeNotification = function(){
                scope.view.pages.notification = ''
                document.getElementById('pages_notification').innerHTML = ''
            }

            setTimeout(function(){
                scope.renderPage()
            },1000)


        }

    </script>
