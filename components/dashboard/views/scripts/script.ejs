
    <script>

        extend.dashboard = function(){

            scope.toggleContext = function(type, key){

                let el = document.getElementById(type),
                    target = this.target

                if (target && !target._app){

                    target = target.parentNode
                }

                if (el && el.style && el.style.display != 'none'){
                    el.style.display = 'none'
                } else {
                    contextCloseAll()
                }

                el.style.display = 'block'

                let target_pos = target.getBoundingClientRect()

                let top = target_pos.top,
                    left = target_pos.left

                if (left+el.offsetWidth > window.innerWidth){
                    left = left - el.offsetWidth + target.offsetWidth
                }

                top = top+target.offsetHeight

                el.style.top = top+'px'
                el.style.left = left+'px'

                if (typeof key == 'number'){
                    scope.view.key = key
                } else if (typeof key == 'undefined'){
                    scope.view.key = 0
                }

            }

            scope.searchApi = function(collection, str, prefix){

                clearTimeout(scope.view.typing)
                scope.view.typing = setTimeout(function(){

                    let url = '/api/'+collection+'/search?str='+str.toLowerCase()

                    http(url)
                        .then((data) => {
                            scope[collection] = JSON.parse(data)

                            if (prefix){
                                scope.view[prefix+'_search_results'] = true
                            } else {
                                scope.view.search_results = true
                            }

                            // console.log(scope[collection])
                        }).catch((err) => {
                            scope.notify(err, 'error')
                        })

                },500)

            }

            scope.newObj = function(type){
                scope.new = {}
                scope.new.new_array = {}
                scope.view.modal = 'show_edit'
            }

            scope.resetNew = function(){

                return new Promise(function(resolve, reject) {
                    scope.new = {}
                    scope.new.new_array = {}
                    scope.view.modal = false
                    resolve()
                });

            }

            scope.editItem = function(collection, key, no_modal){

                contextCloseAll()

                scope.new = scope[collection][scope.view.key]

                if (!no_modal){
                    scope.openModal('show_edit')
                }

                view.update('new')

            }

            scope.addItem = function(collection, obj){

                delete obj._key
                delete obj._id

                scope.post(collection, obj).then((data)=>{
                    view.update(collection)
                    scope.closeModal()
                    scope.notify('Added')
                }).catch((err)=>{
                    scope.notify(err,'error',5,'fa-exclamation-circle')
                })

            }

            scope.saveItem = function(collection, obj, keep_open){

            //    const editordata = editor.getData()

                scope.notify('Saving...')

                if (typeof obj.content != 'undefined'){
                //    obj.content = contented.getData()
                }

                scope.post(collection, obj).then((data)=>{

                    view.update(collection)
                    if (!keep_open){
                        scope.closeModal()
                    }

                    scope.notify('Updated')

                }).catch((err)=>{
                    scope.notify(err,'error',5,'fa-exclamation-circle')
                })

            }

            scope.saveSingle = function(collection, key, obj){

                scope.notify('Saving...','success','inf','fa-save rotate')

                scope.put(collection, key, scope.new).then((data)=>{
                    scope.notify('Updated')
                }).catch((err)=>{
                    scope.notify(err,'error',5,'fa-exclamation-circle')
                })

            }

            scope.deleteItem = function(collection){

                if (scope.view.modal && scope.view.modal == 'delete_confirm'){

                    contextCloseAll()

                    let key = scope[collection][scope.view.key]._key
                    scope.closeModal()
                    console.log(collection, key, scope.view.key)
                    scope.delete(collection,key).then(()=>{
                        view.update(collection)
                        scope.notify('Deleted')
                    }).catch((err)=>{
                        console.log(err)
                        scope.notify(err,'error',5,'fa-exclamation-circle')
                    })

                } else {
                    scope.openModal('delete_confirm')
                }

            }

            scope.push = function(obj,item,input){

                let obj_string = ''

                if (typeof obj == 'string'){
                    obj_string = obj+''
                    obj = evaluate.getValue(obj)
                }

                if (!obj || obj == null){
                    evaluate.setValue(obj_string,[])
                    obj = evaluate.getValue(obj_string)
                }

                if (typeof item == 'string'){
                    item = {
                        _key: Date.now(),
                        value: item.replace(/"/g,'')
                    }
                } else if (typeof item == 'object'){
                    item._key = Date.now()
                }

                if (input){

                    obj.push(item)
                    evaluate.setValue(input,'')
                    view.update(obj_string)

                } else {
                    obj.push(item)
                    view.update(obj_string)
                }

            }

            scope.splice = function(obj,item){

                if (obj && obj.length > 0){
                    let idx = obj.findIndex((itm,i)=>{
                        return itm == item
                    })
                    if (idx >= 0){
                        obj.splice(idx,1)
                    }
                }

            }

            scope.getMailbox = function(user_id){
                scope.get('admin',user_id+'/get_messages').then((data)=>{
                    scope.admin.mailbox = data.sort((a, b) => -a.date.localeCompare(b.date))
                })
            }

            scope.openMessage = function(message,idx){
                if (scope.view.mailbox == message){
                    scope.view.mailbox = false
                } else {
                    scope.view.mailbox = message
                }
            }

            scope.deleteMessage = function(message,idx){

                document.getElementById('message'+idx).classList.add('deleted')
                setTimeout(function(){
                    scope.delete('message',message._key).then((data)=>{
                    //    console.log(data)
                        scope.notify('Notification Deleted','success',10,'fa-envelope-open-text')
                    //    scope.admin.mailbox = data.sort((a, b) => -a.date.localeCompare(b.date))
                    }).catch((err)=>{
                        scope.notify(err,'error')
                    })
                },500)

            }

            scope.openModal = function(modal){
                scope.view.modal = modal
                view.update('view.modal')
            }

            scope.closeModal = function(){
                scope.view.modal = false
                view.update('view.modal')
            }

            socketConnect("<%- view.websocket.url %>")

            watch['ws_data'] = function(data){
                console.log('incoming: ',data)
                if (typeof data == 'object' && data.text){
                    scope.view.page_title = document.title+''
                    document.title = 'New Message!'
                    scope.notify(data.subject,'success',10,'fa-envelope-open-text').then(()=>{
                        document.title = scope.view.page_title
                    })
                    if (scope.admin){
                        if (!scope.admin.mailbox){
                            scope.admin.mailbox = []
                        }
                        scope.admin.mailbox.push(data)
                        scope.admin.mailbox.sort((a, b) => -a.date.localeCompare(b.date))
                    }
                }


            }

        }

    </script>
