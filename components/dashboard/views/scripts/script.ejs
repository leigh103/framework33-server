
    <script>

        extend.dashboard = function(){

            scope.view.heading = ''
            scope.view.edit_tab = 'details'
            scope.view.form = {
                inputs: [],
                details: {
                    name: '',
                    url:'',
                    button_text:''
                }
            }

            scope.focusSearch = function(el){

                if (el.classList.contains('focused')){
                    el.classList.remove('focused')
                } else {
                    el.classList.add('focused')
                }

            }

            scope.view.input_check = ''

            <% if (typeof status_count == 'object'){ %>

                scope.view.status_count = <%- JSON.stringify(status_count) %>
                scope.view.status_count_obj = {}

                scope.view.status_count.map((status)=>{

                    scope.view.status_count_obj[status.field] = status.count
                    let menu_link = document.querySelector('.side-nav a#menu-'+status.field)

                    if (menu_link){
                        menu_link.innerHTML = menu_link.innerHTML+'<div class="count">'+status.count+'</div>'
                    }

                })

            <% } %>

            scope.toggleContext = function(type, key){


                let el = document.getElementById(type),
                    target = this.target

                if (target && !target.classList.contains('context-link') || target && !target._app){
                    target = target.parentNode
                }

                if (el && el.style && el.style.display != 'none'){
                    view.exitView(el).then(()=>{
                    })
                } else {
                    contextCloseAll()
                }

                let table_wrap = document.querySelector('.table-inner-wrap')
                if (table_wrap){
                    console.log('no scroll')
                    table_wrap.style.overflowY = 'hidden'
                }

                view.enterView(el).then(()=>{
                })

                let target_pos = target.getBoundingClientRect()

                let top = target_pos.top,
                    left = target_pos.left

                if (left+el.offsetWidth > window.innerWidth){
                    left = left - el.offsetWidth + target.offsetWidth
                }

                top = top

                el.style.top = top+'px'
                el.style.left = left+'px'
                el.style.width = target_pos.width+'px'

                if (typeof key == 'number'){
                    scope.view.key = key
                } else if (typeof key == 'undefined'){
                    scope.view.key = 0
                }

            }

            scope.search = function(collection){

                clearTimeout(scope.view.typing)
                clearTimeout(scope.view.input_check)

                let str = this.target.value

                if (str.length > 2){

                    scope.view.typing = setTimeout(function(){

                        let url = '/api/'+collection+'/search?str='+str.toLowerCase()

                        http.get(url)
                            .then((data) => {

                                scope[collection] = JSON.parse(data)
                                view.update(collection)

                                if (scope[collection].length == 0){
                                    scope.notify('Nothing found','error',5,'fa-search')
                                } else if (scope[collection].length == 1){

                                    scope.view.input_check = setTimeout(function(){
                                        let first_input = document.querySelector('.table input[type=text]')

                                        if (first_input){
                                            first_input.focus()
                                        }
                                    },500)

                                }

                            }).catch((err) => {
                                console.log(err)
                                scope.notify(err, 'error')
                            })

                    },500)

                } else {

                    <% if (typeof table != 'undefined'){ %>

                        scope.view.typing = setTimeout(function(){

                            scope.get('<%- table %><% if (typeof query != 'undefined'){ %><%- query %><% } %>').then((data)=>{
                                scope[collection] = data
                                view.update(collection)
                            }).catch((err) => {
                                console.log(err)
                                scope.notify(err, 'error')
                            })

                        },500)

                    <% } %>
                }


            }

            scope.newObj = function(type){
                scope.new = {}
                scope.new.new_array = {}
                view.update('new')
                scope.openModal('show_edit')
            }

            scope.resetNew = function(){

                return new Promise(function(resolve, reject) {
                    scope.new = {}
                    scope.new.new_array = {}
                    scope.view.modal = false
                    resolve()
                });

            }

            scope.getItem = function(collection, key){

                if (key != 'new'){
                    setTimeout(function(){
                        http.get('/api/'+collection+'/'+key).then((data)=>{
                            scope.new = JSON.parse(data)
                            view.update('new')
                        })
                    },500)
                }

            }

            scope.editItem = function(collection){

                window.location.href = '/dashboard/'+collection+'/'+scope[collection][scope.view.key]._key

            }

            scope.addItem = function(collection, obj){

                delete obj._key
                delete obj._id

                scope.post(collection, obj).then((data)=>{
                    view.update(collection)
                    scope.closeModal()
                    scope.notify('Added')
                }).catch((err)=>{
                    scope.notify(err,'error',5,'fa-exclamation-circle')
                })

            }

            scope.saveItem = function(collection, obj, keep_open){

            //    const editordata = editor.getData()

                if (scope.view.key){
                    scope[collection][scope.view.key] = obj
                }

                scope.notify('Saving...')

                if (typeof obj.content != 'undefined'){
                //    obj.content = contented.getData()
                }

                scope.post(collection, obj).then((data)=>{
                    // console.log(collection, data, scope.view.key)
                    // scope[collection][scope.view.key] = data
                    // view.update(collection+'['+scope.view.key+']')
                    // if (!keep_open){
                    //     scope.closeModal()
                    // }

                    scope.notify('Updated')

                }).catch((err)=>{
                    console.log(err)
                    scope.notify(err,'error',5,'fa-exclamation-circle')
                })

            }

            scope.saveSingle = function(collection, key, obj){

                scope.notify('Saving...','success','inf','fa-save rotate')

                scope.put(collection, key, scope.new).then((data)=>{
                    scope.notify('Updated')
                }).catch((err)=>{
                    scope.notify(err,'error',5,'fa-exclamation-circle')
                })

            }

            scope.deleteItem = function(collection){

                if (scope.view.modal && scope.view.modal == 'delete_confirm'){

                    contextCloseAll()

                    let key = scope[collection][scope.view.key]._key
                    scope.closeModal()
                    console.log(collection, key, scope.view.key)
                    scope.delete(collection,key).then(()=>{
                        view.update(collection)
                        scope.notify('Deleted')
                    }).catch((err)=>{
                        console.log(err)
                        scope.notify(err,'error',5,'fa-exclamation-circle')
                    })

                } else {
                    scope.openModal('delete_confirm')
                }

            }

            scope.push = function(obj,item,input){

                if (!item){
                    return false
                }

                let obj_string = ''

                if (typeof obj == 'string'){
                    obj_string = obj+''
                    obj = evaluate.getValue(obj)
                }

                if (!obj || obj == null){
                    evaluate.setValue(obj_string,[])
                    obj = evaluate.getValue(obj_string)
                }

                if (typeof item == 'string'){
                    item = {
                        _key: Date.now(),
                        value: item.replace(/"/g,'')
                    }
                } else if (typeof item == 'object'){
                    item._key = Date.now()
                }

                if (input){

                    obj.push(item)
                    evaluate.setValue(input,'')
                    view.update(obj_string)

                } else {
                    obj.push(item)
                    view.update(obj_string)
                }

            }

            scope.splice = function(obj,item){

                if (obj && obj.length > 0){
                    obj = obj.filter((itm,i)=>{
                        return itm.value != item
                    })

                    evaluate.setValue(this._params[0], obj)
                }

            }

            scope.getMailbox = function(user_id){
                scope.get('admin',user_id+'/get_messages').then((data)=>{
                    scope.admin.mailbox = data.sort((a, b) => -a.date.localeCompare(b.date))
                })
            }

            scope.openMessage = function(message,idx){
                if (scope.view.mailbox == message){
                    scope.view.mailbox = false
                } else {
                    scope.view.mailbox = message
                }
            }

            scope.deleteMessage = function(message,idx){

                document.getElementById('message'+idx).classList.add('deleted')
                setTimeout(function(){
                    scope.delete('message',message._key).then((data)=>{
                    //    console.log(data)
                        scope.notify('Notification Deleted','success',10,'fa-envelope-open-text')
                    //    scope.admin.mailbox = data.sort((a, b) => -a.date.localeCompare(b.date))
                    }).catch((err)=>{
                        scope.notify(err,'error')
                    })
                },500)

            }

            scope.openModal = function(modal){
                contextCloseAll()
                scope.view.modal = modal
                view.update('view.modal')
            }

            scope.closeModal = function(){
                scope.view.modal = false
                view.update('view.modal')
            }

            var savedrange = null;

            function getSelection(){
                var savedRange;
                if (window.getSelection && window.getSelection().rangeCount > 0){
                    savedRange = window.getSelection().getRangeAt(0).cloneRange();
                } else if (document.selection){
                    savedRange = document.selection.createRange();
                }
                return savedRange;
            }

            function setCaret(selection) {

                var range = document.createRange()
                var sel = window.getSelection()

                range.setStart(selection.startContainer, selection.startOffset)
                range.setEnd(selection.startContainer, selection.endOffset)

                sel.removeAllRanges()
                sel.addRange(range)

            }

            scope.insertTab = function(e) {
                if (e.keyCode != 9) return // tab key
                document.execCommand('insertHTML', false, '&#009')
                e.preventDefault();
            }

            scope.exec = function(type, data, idx){

                let sup_data, img_node

                if (type.match(/createLink|insertImage|insertIcon/)){ // functions that need input

                    scope.view.exec = {}
                    scope.view.exec.input_el = idx

                    scope.view.exec.selection = getSelection()

                    scope.view.modal = 'show_input'

                    if (type.match(/createLinkButton/)){
                        scope.view.exec.title = 'Insert URL'
                        scope.view.exec.input = 'Add link URL'
                        scope.view.exec.input_2 = 'Add link text'
                        scope.view.exec.type = type
                        scope.view.exec.data = data
                    } else if (type.match(/createLink/)){
                        scope.view.exec.title = 'Insert URL'
                        scope.view.exec.input = 'Add link URL'
                        scope.view.exec.type = type
                        scope.view.exec.data = data
                    } else if (type.match(/insertImage/)){
                        scope.view.exec.title = 'Insert URL or Upload Image'
                        scope.view.exec.input = 'Add image URL'
                        scope.view.exec.input_2 = 'Image name / ALT tag (required)'
                        scope.view.exec.image = true
                        scope.view.exec.type = type
                        scope.view.exec.data = data
                    } else if (type.match(/insertIcon/)){
                        scope.view.exec.title = 'Font Awesome or Upload Icon'
                        scope.view.exec.input = 'Add Font Awesome class, eg. fa-chevron-right'
                        scope.view.exec.image = true
                        scope.view.exec.type = type
                        scope.view.exec.data = data
                    }

                    return

                } else if (type.match(/insertForm/)){

                    scope.view.exec = {}
                    scope.view.exec.input_el = idx

                    scope.view.exec.selection = getSelection()

                    scope.view.modal = 'show_form_builder'
                    return

                } else if (type == 'exec'){

                    if (type.match(/insertImage/) && !scope.view.text_input_2){
                        scope.notify('Please set an image name. This is used for the image alt tag, and is important for SEO','error')
                        return false
                    }

                    scope.view.modal = false
                    type = scope.view.exec.type

                    if (scope.view.exec.selection){
                        setCaret(scope.view.exec.selection)
                    } else if (typeof scope.view.exec.image == 'object'){
                        img_node = scope.view.exec.image
                    }

                    if (scope.view.text_input){
                        data = scope.view.text_input
                    } else if (scope.view.image_url){
                        data = scope.view.image_url
                    } else {
                        data = scope.view.exec.data
                    }

                    if (scope.view.text_input_2){
                        sup_data = scope.view.text_input_2
                    }

                    delete scope.view.exec
                    scope.view.text_input = ''
                    scope.view.image_url = ''

                }

                if (type.match(/insertImage/)){

                    type = 'insertHTML'

                    if (data && data.match(/base64/)){

                        scope.uploadImage(data,false,'content',sup_data).then((img_url)=>{

                            if (typeof img_node == 'object'){

                                let new_img = document.createElement("img")
                                new_img.setAttribute('src', img_url)
                                new_img.setAttribute('alt', sup_data)

                                img_node.target.parentNode.replaceChild(new_img, img_node.target)
                                scope.updateCE()

                            } else {
                                data = '<img src="'+img_url+'" alt="'+sup_data+'" class="w-100">'
                                document.execCommand(type,false,data)
                            }

                        }).catch((err)=>{
                            scope.notify(err,'error')
                        })

                    } else {

                        if (typeof img_node == 'object'){

                            let new_img = document.createElement("img")
                            new_img.setAttribute('src', data)
                            new_img.setAttribute('alt', sup_data)

                            img_node.target.parentNode.replaceChild(new_img, img_node.target)
                            scope.updateCE()

                        } else {
                            data = '<img src="'+data+'" alt="'+sup_data+'" class="w-100">'
                            document.execCommand(type,false,data)
                        }

                    }

                    scope.view.text_input_2 = ''

                } else {

                    if (type.match(/insertIcon/)){
                        type = 'insertHTML'

                        if (data.match(/^fa/)){
                            data = '<i class="fas '+data+'"></i>'
                        } else {
                            data = '<img src="'+data+'" class="icon">'
                        }

                    }

                    if (type.match(/createLinkButton/)){
                        type = 'insertHTML'
                        data = '<a class="btn highlight" href="'+data+'">'+scope.view.text_input_2+'</a>'
                        scope.view.text_input_2 = ''
                    }

                    // if (type == 'formatBlock'){
                    //     let selection = window.getSelection()
                    //     console.log(selection.toString())
                    //     selection = scope.stripTags(selection)
                    //     console.log(selection)
                    //     type = 'insertHTML'
                    //     data = '<'+data+'>'+selection+'</'+data+'>'
                    // }

                    // if (type == 'align'){
                    //     let selection = window.getSelection()
                    //     selection = scope.stripTags(selection)
                    //     type = 'insertHTML'
                    //     data = '<p class="text-'+data+'">'+selection+'</p>'
                    // }

                    document.execCommand(type,false,data)

                    if (typeof scope.renderContent == 'function'){
                        scope.renderContent()
                    }

                }




            }

            scope.stripTags = function(str){
                let div = document.createElement("div")
                div.innerHTML = str.toString()
                return div.innerText
            }

            scope.addInput = function(){

                let payload = {
                    type:'text',
                    label: ''
                }

                scope.view.form.inputs.push(payload)

            }

            scope.insertForm = function(){

                setCaret(scope.view.exec.selection)

                let form_name = scope.view.form.details.name.replace(/\s/g,'-').replace(/\'|\"|\,|\./g,'').toLowerCase()

                let form = '<form id="'+form_name+'" action="'+scope.view.form.details.url+'" method="post">'

                scope.view.form.inputs.map((input)=>{

                    if (!input.type.match(/checkbox/i)){
                        form += '<div class="mb-1"><label>'+input.label+'</label>'
                    } else {
                        form += '<div class="mb-1">'
                    }

                    let required = ''

                    if (input.required === true){
                        required = ' required="true"'
                    }

                    if (input.type.match(/textarea/i)){
                        form += '<textarea id="form-'+input.label.replace(/\s/g,'-').toLowerCase()+'" class="form-'+form_name+'"'+required+'></textarea></div>'
                    } else if (input.type.match(/checkbox/i)){
                        form += '<label class="checkbox"><input type="'+input.type+'" id="form-'+input.label.replace(/\s/g,'-').toLowerCase()+'" class="form-'+form_name+'"'+required+'><p>'+input.label+'</p></label></div>'
                    } else {
                        form += '<input type="'+input.type+'" id="form-'+input.label.replace(/\s/g,'-').toLowerCase()+'" class="form-'+form_name+'"'+required+'></div>'
                    }

                })

                if (!scope.view.form.details.button_text){
                    scope.view.form.details.button_text = 'Submit'
                }

                form += '<div class="text-right"><button class="btn highlight" app-click="submitForm(\''+form_name+'\')">'+scope.view.form.details.button_text+'</div></form>'

                document.execCommand('insertHTML',false,form)

                scope.view.modal = false
                scope.view.form = {
                    inputs: [],
                    details: {
                        name: '',
                        url:'',
                        button_text:''
                    }
                }

            }

            socketConnect("<%- view.websocket.url %>")

            watch['ws_data'] = function(data){
                console.log('incoming: ',data)
                if (typeof data == 'object' && data.text){
                    scope.view.page_title = document.title+''
                    document.title = 'New Message!'
                    scope.notify(data.subject,'success',10,'fa-envelope-open-text').then(()=>{
                        document.title = scope.view.page_title
                    })
                    if (scope.admin){
                        if (!scope.admin.mailbox){
                            scope.admin.mailbox = []
                        }
                        scope.admin.mailbox.push(data)
                        scope.admin.mailbox.sort((a, b) => -a.date.localeCompare(b.date))
                    }
                }

            }

            let search_box = document.querySelector('.search input')
            if (search_box){
                search_box.focus()
            }

        }

    </script>
